package h265

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestDTSExtractor(t *testing.T) {
	type sequenceSample struct {
		au  [][]byte
		pts time.Duration
		dts time.Duration
	}

	for _, ca := range []struct {
		name     string
		sequence []sequenceSample
	}{
		{
			"with timing info, IDR",
			[]sequenceSample{
				{
					[][]byte{
						{ // VPS
							0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x60,
							0x00, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x03,
							0x00, 0x00, 0x03, 0x00, 0x78, 0x99, 0x98, 0x09,
						},
						{ // SPS
							0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03,
							0x00, 0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x78, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
							0x96, 0x66, 0x69, 0x24, 0xca, 0xe0, 0x10, 0x00,
							0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01,
							0xe0, 0x80,
						},
						{ // PPS
							0x44, 0x1, 0xc1, 0x72, 0xb4, 0x62, 0x40,
						},
						{ // IDR_W_RADL
							0x26, 0x1, 0xaf, 0x8, 0x42, 0x23, 0x48, 0x8a, 0x43, 0xe2,
						},
					},
					0,
					-66666666 * time.Nanosecond,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xd0, 0x19, 0x5f, 0x8c, 0xb4, 0x42,
						0x49, 0x20, 0x40, 0x11, 0x16, 0x92, 0x93, 0xea,
						0x54, 0x57, 0x4e, 0x0a,
					}},
					100 * time.Millisecond,
					-33333333 * time.Nanosecond,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xe0, 0x44, 0x97, 0xe0, 0x81, 0x20,
						0x44, 0x52, 0x62, 0x7a, 0x1b, 0x88, 0x0b, 0x21,
						0x26, 0x5f, 0x10, 0x9c,
					}},
					66666666 * time.Nanosecond,
					0,
				},
				{
					[][]byte{{ // TRAIL_N
						0x00, 0x01, 0xe0, 0x24, 0xff, 0xfa, 0x24, 0x0a,
						0x42, 0x25, 0x8c, 0x18, 0xe6, 0x1c, 0xea, 0x5a,
						0x5d, 0x07, 0xc1, 0x8f,
					}},
					33333333 * time.Nanosecond,
					33333333 * time.Nanosecond,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xd0, 0x30, 0x97, 0xd7, 0xdc, 0xf9,
						0x0c, 0x10, 0x11, 0x11, 0x20, 0x42, 0x11, 0x18,
						0x63, 0xa5, 0x18, 0x55,
					}},
					200 * time.Millisecond,
					66666667 * time.Nanosecond,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xe0, 0xa2, 0x25, 0xd7, 0xf7, 0x08,
						0x12, 0x04, 0x45, 0xa1, 0x83, 0xc0, 0x97, 0x53,
						0xa3, 0x5e, 0x78, 0x14,
					}},
					166666666 * time.Nanosecond,
					100 * time.Millisecond,
				},
				{
					[][]byte{{ // TRAIL_N
						0x00, 0x01, 0xe0, 0x82, 0x3f, 0x5f, 0xf6, 0x89,
						0x02, 0x90, 0x88, 0xa3, 0x0c, 0x7d, 0x27, 0x0c,
						0xd4, 0xd9, 0xc2, 0xa5,
					}},
					133333333 * time.Nanosecond,
					133333333 * time.Nanosecond,
				},
			},
		},
		{
			"no timing info, CRA",
			[]sequenceSample{
				{
					[][]byte{
						{ // SPS
							0x42, 0x01, 0x01, 0x02, 0x20, 0x00, 0x00, 0x03,
							0x00, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x7b, 0xa0, 0x07, 0x82, 0x00, 0x88, 0x7d,
							0xb6, 0x71, 0x8b, 0x92, 0x44, 0x80, 0x53, 0x88,
							0x88, 0x92, 0xcf, 0x24, 0xa6, 0x92, 0x72, 0xc9,
							0x12, 0x49, 0x22, 0xdc, 0x91, 0xaa, 0x48, 0xfc,
							0xa2, 0x23, 0xff, 0x00, 0x01, 0x00, 0x01, 0x6a,
							0x02, 0x02, 0x02, 0x01,
						},
						{ // PPS
							0x44, 0x01, 0xc0, 0x25, 0x2f, 0x05, 0x32, 0x40,
						},
						{
							byte(NALUType_CRA_NUT) << 1,
						},
					},
					1 * time.Second,
					1 * time.Second,
				},
			},
		},
	} {
		t.Run(ca.name, func(t *testing.T) {
			ex := NewDTSExtractor()
			for _, sample := range ca.sequence {
				dts, err := ex.Extract(sample.au, sample.pts)
				require.NoError(t, err)
				require.Equal(t, sample.dts, dts)
			}
		})
	}
}

func FuzzDTSExtractor(f *testing.F) {
	sps := []byte{
		0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03,
		0x00, 0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
		0x00, 0x78, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
		0x96, 0x66, 0x69, 0x24, 0xca, 0xe0, 0x10, 0x00,
		0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01,
		0xe0, 0x80,
	}

	pps := []byte{
		0x44, 0x01, 0xc1, 0x72, 0xb4, 0x62, 0x40,
	}

	ex := NewDTSExtractor()
	f.Fuzz(func(t *testing.T, b []byte, p uint64) {
		if len(b) < 1 {
			return
		}
		ex.Extract([][]byte{sps, pps, b}, time.Duration(p)) //nolint:errcheck
	})
}
