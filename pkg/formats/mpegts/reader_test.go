package mpegts

import (
	"bytes"
	"context"
	"testing"

	"github.com/asticode/go-astits"
	"github.com/stretchr/testify/require"

	"github.com/bluenviron/mediacommon/pkg/codecs/h265"
	"github.com/bluenviron/mediacommon/pkg/codecs/mpeg4audio"
)

var testH265SPS = []byte{
	0x42, 0x01, 0x01, 0x02, 0x20, 0x00, 0x00, 0x03,
	0x00, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
	0x00, 0x7b, 0xa0, 0x07, 0x82, 0x00, 0x88, 0x7d,
	0xb6, 0x71, 0x8b, 0x92, 0x44, 0x80, 0x53, 0x88,
	0x88, 0x92, 0xcf, 0x24, 0xa6, 0x92, 0x72, 0xc9,
	0x12, 0x49, 0x22, 0xdc, 0x91, 0xaa, 0x48, 0xfc,
	0xa2, 0x23, 0xff, 0x00, 0x01, 0x00, 0x01, 0x6a,
	0x02, 0x02, 0x02, 0x01,
}

var testH265PPS = []byte{
	0x44, 0x01, 0xc0, 0x25, 0x2f, 0x05, 0x32, 0x40,
}

var testH264SPS = []byte{
	0x67, 0x42, 0xc0, 0x28, 0xd9, 0x00, 0x78, 0x02,
	0x27, 0xe5, 0x84, 0x00, 0x00, 0x03, 0x00, 0x04,
	0x00, 0x00, 0x03, 0x00, 0xf0, 0x3c, 0x60, 0xc9,
	0x20,
}

type sample struct {
	pts  int64
	dts  int64
	data [][]byte
}

var casesReadWriter = []struct {
	name    string
	track   *Track
	samples []sample
	packets []*astits.Packet
}{
	{
		"h265",
		&Track{
			PID:   257,
			Codec: &CodecH265{},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{
					testH265SPS, // SPS
					testH265PPS, // PPS
					{byte(h265.NALUType_CRA_NUT) << 1},
				},
			},
			{
				30*90000 + 2*90000,
				30*90000 + 1*90000,
				[][]byte{
					{byte(h265.NALUType_TRAIL_N) << 1},
				},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x24, 0xe1, 0x01,
					0xf0, 0x00, 0x75, 0x79, 0x1e, 0xaa,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                88,
					StuffingLength:        81,
					RandomAccessIndicator: true,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0x00, 0x00,
					0x00, 0x01, 0x42, 0x01, 0x01, 0x02, 0x20, 0x00,
					0x00, 0x03, 0x00, 0xb0, 0x00, 0x00, 0x03, 0x00,
					0x00, 0x03, 0x00, 0x7b, 0xa0, 0x07, 0x82, 0x00,
					0x88, 0x7d, 0xb6, 0x71, 0x8b, 0x92, 0x44, 0x80,
					0x53, 0x88, 0x88, 0x92, 0xcf, 0x24, 0xa6, 0x92,
					0x72, 0xc9, 0x12, 0x49, 0x22, 0xdc, 0x91, 0xaa,
					0x48, 0xfc, 0xa2, 0x23, 0xff, 0x00, 0x01, 0x00,
					0x01, 0x6a, 0x02, 0x02, 0x02, 0x01, 0x00, 0x00,
					0x00, 0x01, 0x44, 0x01, 0xc0, 0x25, 0x2f, 0x05,
					0x32, 0x40, 0x00, 0x00, 0x00, 0x01, 0x2a,
				},
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:         159,
					StuffingLength: 158,
				},
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0xc0,
					0x0a, 0x31, 0x00, 0xaf, 0xe4, 0x01, 0x11, 0x00,
					0xab, 0x24, 0xe1, 0x00, 0x00, 0x00, 0x01, 0x00,
				},
			},
		},
	},
	{
		"h264",
		&Track{
			PID:   256,
			Codec: &CodecH264{},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{
					testH264SPS, // SPS
					{8},         // PPS
					{5},         // IDR
				},
			},
			{
				30*90000 + 2*90000,
				30*90000 + 1*90000,
				[][]byte{
					{1}, // non-IDR
				},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x00, 0xf0, 0x00, 0x1b, 0xe1, 0x00,
					0xf0, 0x00, 0x15, 0xbd, 0x4d, 0x56,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                130,
					StuffingLength:        123,
					RandomAccessIndicator: true,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       256,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0x00, 0x00,
					0x00, 0x01, 0x67, 0x42, 0xc0, 0x28, 0xd9, 0x00,
					0x78, 0x02, 0x27, 0xe5, 0x84, 0x00, 0x00, 0x03,
					0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0xf0, 0x3c,
					0x60, 0xc9, 0x20, 0x00, 0x00, 0x00, 0x01, 0x08,
					0x00, 0x00, 0x00, 0x01, 0x05,
				},
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:         159,
					StuffingLength: 158,
				},
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       256,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0xc0,
					0x0a, 0x31, 0x00, 0xaf, 0xe4, 0x01, 0x11, 0x00,
					0xab, 0x24, 0xe1, 0x00, 0x00, 0x00, 0x01, 0x01,
				},
			},
		},
	},
	{
		"mpeg-4 video",
		&Track{
			PID:   257,
			Codec: &CodecMPEG4Video{},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{{0, 0, 1, 0xb3}},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x10, 0xe1, 0x01,
					0xf0, 0x00, 0xd5, 0x3a, 0x92, 0x8a,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                165,
					StuffingLength:        158,
					RandomAccessIndicator: true,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0x00, 0x00,
					0x01, 0xb3,
				},
			},
		},
	},
	{
		"mpeg-1 video",
		&Track{
			PID:   257,
			Codec: &CodecMPEG1Video{},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{{0, 0, 1, 0xb8, 1, 2, 3, 4}},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x02, 0xe1, 0x01,
					0xf0, 0x00, 0xc4, 0xf2, 0x53, 0x9c,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                161,
					StuffingLength:        154,
					RandomAccessIndicator: true,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0x00, 0x00,
					0x01, 0xb8, 0x01, 0x02, 0x03, 0x04,
				},
			},
		},
	},
	{
		"opus",
		&Track{
			PID: 257,
			Codec: &CodecOpus{
				ChannelCount: 2,
			},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{{3}, {2}},
			},
			{
				30*90000 + 2*90000,
				30 * 90000,
				[][]byte{{1}},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x1c, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x06, 0xe1, 0x01,
					0xf0, 0x0a, 0x05, 0x04, 0x4f, 0x70, 0x75, 0x73,
					0x7f, 0x02, 0x80, 0x02, 0xcc, 0x21, 0x3d, 0x58,
				}, bytes.Repeat([]byte{0xff}, 152)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                161,
					StuffingLength:        154,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
					RandomAccessIndicator: true,
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xc0, 0x00, 0x10, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0x7f, 0xe0,
					0x01, 0x03, 0x7f, 0xe0, 0x01, 0x02,
				},
			},
			{ // PMT
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x1c, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x06, 0xe1, 0x01,
					0xf0, 0x0a, 0x05, 0x04, 0x4f, 0x70, 0x75, 0x73,
					0x7f, 0x02, 0x80, 0x02, 0xcc, 0x21, 0x3d, 0x58,
				}, bytes.Repeat([]byte{0xff}, 152)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                165,
					StuffingLength:        164,
					RandomAccessIndicator: true,
				},
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xc0, 0x00, 0x0c, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xaf, 0xe4, 0x01, 0x7f, 0xe0,
					0x01, 0x01,
				},
			},
		},
	},
	{
		"mpeg-4 audio",
		&Track{
			PID: 257,
			Codec: &CodecMPEG4Audio{
				Config: mpeg4audio.AudioSpecificConfig{
					Type:         2,
					SampleRate:   48000,
					ChannelCount: 2,
				},
			},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{{3}, {2}},
			},
			{
				30*90000 + 2*90000,
				30 * 90000,
				[][]byte{{1}},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x0f, 0xe1, 0x01,
					0xf0, 0x00, 0xec, 0xe2, 0xb0, 0x94,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                153,
					StuffingLength:        146,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
					RandomAccessIndicator: true,
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xc0, 0x00, 0x18, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0xff, 0xf1,
					0x4c, 0x80, 0x01, 0x1f, 0xfc, 0x03, 0xff, 0xf1,
					0x4c, 0x80, 0x01, 0x1f, 0xfc, 0x02,
				},
			},
			{ // PMT
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x0f, 0xe1, 0x01,
					0xf0, 0x00, 0xec, 0xe2, 0xb0, 0x94,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                161,
					StuffingLength:        160,
					RandomAccessIndicator: true,
				},
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xc0, 0x00, 0x10, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xaf, 0xe4, 0x01, 0xff, 0xf1,
					0x4c, 0x80, 0x01, 0x1f, 0xfc, 0x01,
				},
			},
		},
	},
	{
		"mpeg-1 audio",
		&Track{
			PID:   257,
			Codec: &CodecMPEG1Audio{},
		},
		[]sample{
			{
				30 * 90000,
				30 * 90000,
				[][]byte{{
					0xff, 0xfa, 0x52, 0x04, 0xa9, 0xbe, 0xe4, 0x8f,
					0xf0, 0xfd, 0x02, 0xdc, 0x80, 0x00, 0x30, 0x00,
					0x22, 0xc1, 0x5b, 0x90, 0x14, 0x23, 0x24, 0x05,
					0x58, 0x3f, 0x72, 0x02, 0x84, 0xc4, 0xc0, 0xc5,
					0x07, 0xae, 0x40, 0x21, 0xbc, 0x98, 0x90, 0xfa,
					0x3a, 0x2d, 0xda, 0x07, 0xe1, 0x4d, 0xa9, 0x9a,
					0xb8, 0xa2, 0x3b, 0x20, 0xc1, 0xc1, 0xba, 0x08,
					0x94, 0x30, 0x8b, 0xc5, 0x69, 0x51, 0x95, 0xd5,
					0xd7, 0x42, 0x91, 0x65, 0x09, 0xfb, 0x7e, 0x7e,
					0xd9, 0xcf, 0x7f, 0x77, 0x45, 0x03, 0x8d, 0x5c,
					0xcd, 0x52, 0x82, 0x19, 0xbc, 0x94, 0x8c, 0x78,
					0x13, 0xe0, 0x94, 0xc2, 0x96, 0x62, 0x82, 0x20,
					0xb9, 0xf1, 0x3a, 0x05, 0xfa, 0x94, 0x06, 0xbd,
					0xf6, 0x67, 0xa3, 0xca, 0xa5, 0x3a, 0xd5, 0xb5,
					0x34, 0xa9, 0xe8, 0x7e, 0x9f, 0x2f, 0x53, 0xde,
					0x8b, 0xd6, 0x3c, 0x2f, 0x2d, 0xb4, 0x56, 0x0c,
					0xc5, 0x3e, 0x7a, 0xa7, 0x81, 0x5c, 0x35, 0x60,
					0xb3, 0x0c, 0x28, 0x2c, 0x08, 0x06, 0xc0, 0xe0,
					0x3c, 0x0a, 0xfa, 0x1a, 0x6f, 0x43, 0x55, 0xbe,
					0x05, 0x5a, 0x53, 0xae, 0xcb, 0x74, 0xa9, 0xe8,
					0x7e, 0x9f, 0x2f, 0x53, 0xde, 0x8b, 0xd6, 0x20,
					0x36, 0xce, 0xcb, 0xcd, 0x95, 0x15, 0x08, 0xaa,
					0x82, 0x13, 0x51, 0x48, 0xc1, 0x09, 0x28, 0x46,
					0x11, 0x0b, 0x3b, 0x41, 0x34, 0x50, 0x24, 0x18,
					0xa7, 0x72, 0x88, 0x99, 0x49, 0x17, 0x63, 0xac,
					0xa7, 0x98, 0x7e, 0x81, 0x7b, 0x13, 0x9d, 0x7f,
					0xd3,
				}},
			},
		},
		[]*astits.Packet{
			{ // PMT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       0,
				},
				Payload: append([]byte{
					0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
					0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
					0x78,
				}, bytes.Repeat([]byte{0xff}, 167)...),
			},
			{ // PAT
				Header: astits.PacketHeader{
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       4096,
				},
				Payload: append([]byte{
					0x00, 0x02, 0xb0, 0x12, 0x00, 0x01, 0xc1, 0x00,
					0x00, 0xe1, 0x01, 0xf0, 0x00, 0x03, 0xe1, 0x01,
					0xf0, 0x00, 0x8d, 0xff, 0x34, 0x11,
				}, bytes.Repeat([]byte{0xff}, 162)...),
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:                7,
					HasPCR:                true,
					PCR:                   &astits.ClockReference{Base: 2691000},
					RandomAccessIndicator: true,
				},
				Header: astits.PacketHeader{
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: true,
					PID:                       257,
				},
				Payload: []byte{
					0x00, 0x00, 0x01, 0xc0, 0x00, 0xd9, 0x80, 0x80,
					0x05, 0x21, 0x00, 0xa5, 0x65, 0xc1, 0xff, 0xfa,
					0x52, 0x04, 0xa9, 0xbe, 0xe4, 0x8f, 0xf0, 0xfd,
					0x02, 0xdc, 0x80, 0x00, 0x30, 0x00, 0x22, 0xc1,
					0x5b, 0x90, 0x14, 0x23, 0x24, 0x05, 0x58, 0x3f,
					0x72, 0x02, 0x84, 0xc4, 0xc0, 0xc5, 0x07, 0xae,
					0x40, 0x21, 0xbc, 0x98, 0x90, 0xfa, 0x3a, 0x2d,
					0xda, 0x07, 0xe1, 0x4d, 0xa9, 0x9a, 0xb8, 0xa2,
					0x3b, 0x20, 0xc1, 0xc1, 0xba, 0x08, 0x94, 0x30,
					0x8b, 0xc5, 0x69, 0x51, 0x95, 0xd5, 0xd7, 0x42,
					0x91, 0x65, 0x09, 0xfb, 0x7e, 0x7e, 0xd9, 0xcf,
					0x7f, 0x77, 0x45, 0x03, 0x8d, 0x5c, 0xcd, 0x52,
					0x82, 0x19, 0xbc, 0x94, 0x8c, 0x78, 0x13, 0xe0,
					0x94, 0xc2, 0x96, 0x62, 0x82, 0x20, 0xb9, 0xf1,
					0x3a, 0x05, 0xfa, 0x94, 0x06, 0xbd, 0xf6, 0x67,
					0xa3, 0xca, 0xa5, 0x3a, 0xd5, 0xb5, 0x34, 0xa9,
					0xe8, 0x7e, 0x9f, 0x2f, 0x53, 0xde, 0x8b, 0xd6,
					0x3c, 0x2f, 0x2d, 0xb4, 0x56, 0x0c, 0xc5, 0x3e,
					0x7a, 0xa7, 0x81, 0x5c, 0x35, 0x60, 0xb3, 0x0c,
					0x28, 0x2c, 0x08, 0x06, 0xc0, 0xe0, 0x3c, 0x0a,
					0xfa, 0x1a, 0x6f, 0x43, 0x55, 0xbe, 0x05, 0x5a,
					0x53, 0xae, 0xcb, 0x74, 0xa9, 0xe8, 0x7e, 0x9f,
				},
			},
			{ // PES
				AdaptationField: &astits.PacketAdaptationField{
					Length:         136,
					StuffingLength: 135,
				},
				Header: astits.PacketHeader{
					ContinuityCounter:         1,
					HasAdaptationField:        true,
					HasPayload:                true,
					PayloadUnitStartIndicator: false,
					PID:                       257,
				},
				Payload: []byte{
					0x2f, 0x53, 0xde, 0x8b, 0xd6, 0x20, 0x36, 0xce,
					0xcb, 0xcd, 0x95, 0x15, 0x08, 0xaa, 0x82, 0x13,
					0x51, 0x48, 0xc1, 0x09, 0x28, 0x46, 0x11, 0x0b,
					0x3b, 0x41, 0x34, 0x50, 0x24, 0x18, 0xa7, 0x72,
					0x88, 0x99, 0x49, 0x17, 0x63, 0xac, 0xa7, 0x98,
					0x7e, 0x81, 0x7b, 0x13, 0x9d, 0x7f, 0xd3,
				},
			},
		},
	},
}

func TestReader(t *testing.T) {
	for _, ca := range casesReadWriter {
		t.Run(ca.name, func(t *testing.T) {
			var buf bytes.Buffer
			mux := astits.NewMuxer(context.Background(), &buf)

			for _, packet := range ca.packets {
				_, err := mux.WritePacket(packet)
				require.NoError(t, err)
			}

			r, err := NewReader(&buf)
			require.NoError(t, err)
			require.Equal(t, ca.track, r.Tracks()[0])

			i := 0

			switch ca.track.Codec.(type) {
			case *CodecH265, *CodecH264:
				r.OnDataH26x(ca.track, func(pts int64, dts int64, au [][]byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].dts, dts)
					require.Equal(t, ca.samples[i].data, au)
					i++
					return nil
				})

			case *CodecMPEG4Video:
				r.OnDataMPEGxVideo(ca.track, func(pts int64, frame []byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].data[0], frame)
					i++
					return nil
				})

			case *CodecMPEG1Video:
				r.OnDataMPEGxVideo(ca.track, func(pts int64, frame []byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].data[0], frame)
					i++
					return nil
				})

			case *CodecOpus:
				r.OnDataOpus(ca.track, func(pts int64, packets [][]byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].data, packets)
					i++
					return nil
				})

			case *CodecMPEG4Audio:
				r.OnDataMPEG4Audio(ca.track, func(pts int64, aus [][]byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].data, aus)
					i++
					return nil
				})

			case *CodecMPEG1Audio:
				r.OnDataMPEG1Audio(ca.track, func(pts int64, frames [][]byte) error {
					require.Equal(t, ca.samples[i].pts, pts)
					require.Equal(t, ca.samples[i].data, frames)
					i++
					return nil
				})

			default:
				t.Errorf("unexpected")
			}

			for {
				err := r.Read()
				if err == astits.ErrNoMorePackets {
					break
				}
				require.NoError(t, err)
			}

			require.Equal(t, len(ca.samples), i)
		})
	}
}

func FuzzReader(f *testing.F) {
	f.Add(true, []byte{
		0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x80, 0x80,
		0x05, 0x21, 0x00, 0x0b, 0x7e, 0x41, 0x00, 0x00,
		0x00, 0x01,
		0x67, 0x42, 0xc0, 0x28, 0xd9, 0x00, 0x78, 0x02,
		0x27, 0xe5, 0x84, 0x00, 0x00, 0x03, 0x00, 0x04,
		0x00, 0x00, 0x03, 0x00, 0xf0, 0x3c, 0x60, 0xc9,
		0x20,
		0x00, 0x00, 0x00, 0x01, 0x08,
		0x00, 0x00, 0x00, 0x01, 0x05,
	})

	f.Fuzz(func(t *testing.T, pid bool, b []byte) {
		var buf bytes.Buffer
		mux := astits.NewMuxer(context.Background(), &buf)

		// PMT
		mux.WritePacket(&astits.Packet{ //nolint:errcheck
			Header: astits.PacketHeader{
				HasPayload:                true,
				PayloadUnitStartIndicator: true,
				PID:                       0,
			},
			Payload: append([]byte{
				0x00, 0x00, 0xb0, 0x0d, 0x00, 0x00, 0xc1, 0x00,
				0x00, 0x00, 0x01, 0xf0, 0x00, 0x71, 0x10, 0xd8,
				0x78,
			}, bytes.Repeat([]byte{0xff}, 167)...),
		})

		// PAT
		mux.WritePacket(&astits.Packet{ //nolint:errcheck
			Header: astits.PacketHeader{
				HasPayload:                true,
				PayloadUnitStartIndicator: true,
				PID:                       4096,
			},
			Payload: append([]byte{
				0x00, 0x02, 0xb0, 0x17, 0x00, 0x01, 0xc1, 0x00,
				0x00, 0xe1, 0x00, 0xf0, 0x00, 0x1b, 0xe1, 0x00,
				0xf0, 0x00, 0x0f, 0xe1, 0x01, 0xf0, 0x00, 0x2f,
				0x44, 0xb9, 0x9b,
			}, bytes.Repeat([]byte{0xff}, 157)...),
		})

		// AAC config
		mux.WritePacket(&astits.Packet{ //nolint:errcheck
			AdaptationField: &astits.PacketAdaptationField{
				Length:                158,
				StuffingLength:        157,
				RandomAccessIndicator: true,
			},
			Header: astits.PacketHeader{
				HasAdaptationField:        true,
				HasPayload:                true,
				PayloadUnitStartIndicator: true,
				PID:                       257,
			},
			Payload: []byte{
				0x00, 0x00, 0x01, 0xc0, 0x00, 0x13, 0x80, 0x80,
				0x05, 0x21, 0x00, 0x11, 0x3d, 0x61, 0xff, 0xf1,
				0x50, 0x80, 0x01, 0x7f, 0xfc, 0x01, 0x02, 0x03,
				0x04,
			},
		})

		r, err := NewReader(&buf)
		if err != nil {
			panic(err)
		}

		// PES
		mux.WritePacket(&astits.Packet{ //nolint:errcheck
			AdaptationField: &astits.PacketAdaptationField{
				Length:                130,
				StuffingLength:        129,
				RandomAccessIndicator: true,
			},
			Header: astits.PacketHeader{
				HasAdaptationField:        true,
				HasPayload:                true,
				PayloadUnitStartIndicator: true,
				PID: func() uint16 {
					if pid {
						return 256
					}
					return 257
				}(),
			},
			Payload: b,
		})

		r.Read() //nolint:errcheck
		r.Read() //nolint:errcheck
		r.Read() //nolint:errcheck
	})
}
